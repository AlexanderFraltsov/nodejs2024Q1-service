openapi: 3.0.0
paths:
  /auth/signup:
    post:
      operationId: AuthController_signup
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupDto'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Dto is invalid
      tags: &ref_0
        - Auth
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Access and refresh tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensDto'
        '400':
          description: Dto is invalid
        '403':
          description: Forbidden
      tags: *ref_0
  /auth/refresh:
    post:
      operationId: AuthController_refresh
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshDto'
      responses:
        '200':
          description: Access and refresh tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensDto'
        '401':
          description: Dto is invalid
        '403':
          description: Forbidden
      tags: *ref_0
  /album:
    get:
      operationId: AlbumController_getAll
      parameters: []
      responses:
        '200':
          description: Albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumResponseDto'
        '401': &ref_1
          description: Unautorized
      tags: &ref_2
        - Album
      security: &ref_3
        - bearer: []
    post:
      operationId: AlbumController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: The album has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Dto is invalid
        '401': *ref_1
      tags: *ref_2
      security: *ref_3
  /album/{id}:
    get:
      operationId: AlbumController_getOneById
      parameters:
        - name: id
          required: true
          in: path
          description: Album id
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Album
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Album id is invalid
        '401': *ref_1
        '404':
          description: Not found
      tags: *ref_2
      security: *ref_3
    put:
      operationId: AlbumController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Album id
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: The album has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Dto is invalid
        '401': *ref_1
        '404':
          description: Not found
      tags: *ref_2
      security: *ref_3
    delete:
      operationId: AlbumController_delete
      parameters:
        - name: id
          required: true
          in: path
          description: Album id
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: The album has been deleted
        '400':
          description: Album id is invalid
        '401': *ref_1
        '404':
          description: Not found
      tags: *ref_2
      security: *ref_3
  /artist:
    get:
      operationId: ArtistController_getAll
      parameters: []
      responses:
        '200':
          description: Artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistResponseDto'
        '401': &ref_4
          description: Unautorized
      tags: &ref_5
        - Artist
      security: &ref_6
        - bearer: []
    post:
      operationId: ArtistController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: The artist has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Dto is invalid
        '401': *ref_4
      tags: *ref_5
      security: *ref_6
  /artist/{id}:
    get:
      operationId: ArtistController_getOneById
      parameters:
        - name: id
          required: true
          in: path
          description: Artist id
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Artist id is invalid
        '401': *ref_4
        '404':
          description: Not found
      tags: *ref_5
      security: *ref_6
    put:
      operationId: ArtistController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Artist id
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: The artist has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Dto is invalid
        '401': *ref_4
        '404':
          description: Not found
      tags: *ref_5
      security: *ref_6
    delete:
      operationId: ArtistController_delete
      parameters:
        - name: id
          required: true
          in: path
          description: Artist id
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: The artist has been deleted
        '400':
          description: Artist id is invalid
        '401': *ref_4
        '404':
          description: Not found
      tags: *ref_5
      security: *ref_6
  /favs:
    get:
      operationId: FavoritesController_getAll
      parameters: []
      responses:
        '200':
          description: Favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseDto'
        '401': &ref_7
          description: Unautorized
      tags: &ref_8
        - Favorites
      security: &ref_9
        - bearer: []
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album id
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: The album has been added to favorites
        '400':
          description: Id is invalid
        '401': *ref_7
        '422':
          description: Album doesn't exist
      tags: *ref_8
      security: *ref_9
    delete:
      operationId: FavoritesController_deleteAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album id
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: The album has been deleted from favorites
        '400':
          description: Id is invalid
        '401': *ref_7
        '404':
          description: Album is not favorite
      tags: *ref_8
      security: *ref_9
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist id
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: The artist has been added to favorites
        '400':
          description: Id is invalid
        '401': *ref_7
        '422':
          description: Artist doesn't exist
      tags: *ref_8
      security: *ref_9
    delete:
      operationId: FavoritesController_deleteArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist id
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: The artist has been deleted from favorites
        '400':
          description: Id is invalid
        '401': *ref_7
        '404':
          description: Artist is not favorite
      tags: *ref_8
      security: *ref_9
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track id
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: The track has been added to favorites
        '400':
          description: Id is invalid
        '401': *ref_7
        '422':
          description: Track doesn't exist
      tags: *ref_8
      security: *ref_9
    delete:
      operationId: FavoritesController_deleteTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track id
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: The track has been deleted from favorites
        '400':
          description: Id is invalid
        '401': *ref_7
        '404':
          description: Track is not favorite
      tags: *ref_8
      security: *ref_9
  /track:
    get:
      operationId: TrackController_getAll
      parameters: []
      responses:
        '200':
          description: Tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackResponseDto'
        '401': &ref_10
          description: Unautorized
      tags: &ref_11
        - Track
      security: &ref_12
        - bearer: []
    post:
      operationId: TrackController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: The track has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Dto is invalid
        '401': *ref_10
      tags: *ref_11
      security: *ref_12
  /track/{id}:
    get:
      operationId: TrackController_getOneById
      parameters:
        - name: id
          required: true
          in: path
          description: Track id
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Track
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Track id is invalid
        '401': *ref_10
        '404':
          description: Not found
      tags: *ref_11
      security: *ref_12
    put:
      operationId: TrackController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Track id
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: The track has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Dto is invalid
        '401': *ref_10
        '404':
          description: Not found
      tags: *ref_11
      security: *ref_12
    delete:
      operationId: TrackController_delete
      parameters:
        - name: id
          required: true
          in: path
          description: Track id
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: The track has been deleted
        '400':
          description: Track id is invalid
        '401': *ref_10
        '404':
          description: Not found
      tags: *ref_11
      security: *ref_12
  /user:
    get:
      operationId: UserController_getAll
      parameters: []
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
        '401': &ref_13
          description: Unautorized
      tags: &ref_14
        - User
      security: &ref_15
        - bearer: []
    post:
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Dto is invalid
        '401': *ref_13
      tags: *ref_14
      security: *ref_15
  /user/{id}:
    get:
      operationId: UserController_getOneById
      parameters:
        - name: id
          required: true
          in: path
          description: User id
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: User id is invalid
        '401': *ref_13
        '404':
          description: Not found
      tags: *ref_14
      security: *ref_15
    put:
      operationId: UserController_changePassword
      parameters:
        - name: id
          required: true
          in: path
          description: User id
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: The user has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Dto is invalid
        '401': *ref_13
        '403':
          description: Forbidden
        '404':
          description: Not found
      tags: *ref_14
      security: *ref_15
    delete:
      operationId: UserController_delete
      parameters:
        - name: id
          required: true
          in: path
          description: User id
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: The user has been deleted
        '400':
          description: User id is invalid
        '401': *ref_13
        '404':
          description: Not found
      tags: *ref_14
      security: *ref_15
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SignupDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        login:
          type: string
          description: User login
        version:
          type: number
          description: User entity version
        createdAt:
          type: number
          description: Timestamp of creation
        updatedAt:
          type: number
          description: Timestamp of last update
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    LoginDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    TokensDto:
      type: object
      properties:
        accessToken:
          type: string
          description: Access token
        refreshToken:
          type: string
          description: Refresh token
      required:
        - accessToken
        - refreshToken
    RefreshDto:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken
    AlbumResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Album ID
        name:
          type: string
          description: Album name
        year:
          type: number
          description: Album year
        artistId:
          type: string
          nullable: true
          format: uuid
          description: Artist ID
      required:
        - id
        - name
        - year
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
      required:
        - name
        - year
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
    ArtistResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        name:
          type: string
          description: Artist name
        grammy:
          type: boolean
          description: Artist has grammy
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
    TrackResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        name:
          type: string
          description: Track name
        artistId:
          type: string
          nullable: true
          format: uuid
          description: Artist ID
        albumId:
          type: string
          nullable: true
          format: uuid
          description: Album ID
        duration:
          type: number
          description: Track duration
      required:
        - id
        - name
        - duration
    FavoritesResponseDto:
      type: object
      properties:
        artists:
          description: Artists
          type: array
          items:
            $ref: '#/components/schemas/ArtistResponseDto'
        albums:
          description: Albums
          type: array
          items:
            $ref: '#/components/schemas/AlbumResponseDto'
        tracks:
          description: Tracks
          type: array
          items:
            $ref: '#/components/schemas/TrackResponseDto'
      required:
        - artists
        - albums
        - tracks
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        duration:
          type: number
        artistId:
          type: string
        albumId:
          type: string
      required:
        - name
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
        duration:
          type: number
        artistId:
          type: string
        albumId:
          type: string
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
